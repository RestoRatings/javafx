/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tn.esprit.services;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.sql.Timestamp;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import tn.esprit.entities.Badge;
import tn.esprit.entities.Restaurant;
import tn.esprit.entities.TypeBadge;
import tn.esprit.entities.User;
import tn.esprit.utils.Datasource;

/**
 *
 * @author Ltifi
 */
public class ServiceBadge implements IserviceBadge<Badge>{

    private static ServiceBadge instance;
    PreparedStatement preparedStatement;
    Connection connection;
    
    public ServiceBadge() {
        connection = tn.esprit.utils.Datasource.getInstance().getCnx();    

}
    
    public static ServiceBadge getInstance() {
        if (instance == null) {
            instance = new ServiceBadge();
        }
        return instance;
    }

    
    
    
        //-------------------------------------------------Ajouter--------------------------------------------------------------------

   @Override
public void ajouter(Badge ba, Restaurant rs, User us) throws SQLException {
    // Insérer le badge dans la table 'badge'
    String req = "INSERT INTO badge (commantaire, dateBadge, typeBadge, iduser,idrestau) VALUES (?, ?, ?, ?,?)";
    PreparedStatement ps = connection.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);
    
    ps.setString(1, ba.getCommantaire());
    ps.setDate(2, Date.valueOf(ba.getDateBadge()));
    ps.setString(3, ba.getTypeBadge().toString());
    ps.setInt(4, us.getIduser());
    ps.setInt(5, rs.getIdrestau());
    int affectedRows = ps.executeUpdate();
    
    if (affectedRows == 0) {
        throw new SQLException("L'insertion dans la table 'badge' a échoué.");
    }
    
    // Obtenir l'ID auto-incrémenté
    ResultSet generatedKeys = ps.getGeneratedKeys();
    if (generatedKeys.next()) {
        int autoGeneratedID = generatedKeys.getInt(1);
        ba.setId(autoGeneratedID);
    } else {
        throw new SQLException("L'obtention de l'ID auto-incrémenté a échoué.");
    }
    
    // Insérer l'association dans la table 'badge_restaurant'
    String req1 = "INSERT INTO badge_restaurant (idrestau, idbadge) VALUES (?, ?)";
    PreparedStatement p = connection.prepareStatement(req1);
    
    p.setInt(1, rs.getIdrestau());
    p.setInt(2, ba.getId());
    
    affectedRows = p.executeUpdate();
    
    if (affectedRows == 0) {
        throw new SQLException("L'insertion dans la table 'badge_restaurant' a échoué.");
    }
}

    
    
    

    
    
    
    
    
    
        //-------------------------------------------------Modifier--------------------------------------------------------------------

  


     @Override
    public boolean existeBadge(int id) throws SQLException {
         String req = "SELECT id FROM badge WHERE id=?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setInt(1, id);
    
    ResultSet rs = ps.executeQuery();
    
    return rs.next();
    }
    
@Override
public void modifier(int id, Badge badgeModifie, int idr) throws SQLException {
    if (!existeBadge(id)) {
        System.err.println("L'ID spécifié n'existe pas dans la base de données.");
        return;
    }

    String req = "UPDATE `badge` SET `commantaire` = ?, `dateBadge` = ?, `typeBadge` = ?, `idrestau` = ? WHERE `id` = ?";
    PreparedStatement ps = connection.prepareStatement(req);

    ps.setString(1, badgeModifie.getCommantaire());
    ps.setDate(2, Date.valueOf(badgeModifie.getDateBadge()));
    ps.setString(3, badgeModifie.getTypeBadge().toString());
    ps.setInt(4, idr);
    ps.setInt(5, id);

    ps.executeUpdate();
}

    
    
    
    
    
        //-------------------------------------------------supprimer--------------------------------------------------------------------

    @Override
    public void supprimer(int id) throws SQLException {
        if (!existeBadge(id)) {
        System.err.println("L'ID spécifié n'existe pas dans la base de données.");
        return;
    }
    String req = "DELETE FROM `badge` WHERE `badge`.`id` = ?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setInt(1, id); 
    ps.executeUpdate();
    String req1 = "DELETE FROM `badge_restaurant` WHERE `idbadge` = ?";
    PreparedStatement p = connection.prepareStatement(req1);
    p.setInt(1, id);
    p.executeUpdate();
    }

    
    
    
    
    
        //-------------------------------------------------Recuperer Badge--------------------------------------------------------------------

   public List<Badge> recuperer() throws SQLException {
    List<Badge> listeBadge = new ArrayList<>();

     String req = "SELECT badge.id, badge.dateBadge, badge.commantaire, badge.typeBadge, " +
             "restaurant.idrestau, restaurant.nom, user.username, user.iduser " +
             "FROM badge " +
             "INNER JOIN restaurant ON badge.idrestau = restaurant.idrestau " + 
             "INNER JOIN user ON user.iduser = badge.iduser";


    PreparedStatement ps = connection.prepareStatement(req);
    ResultSet rs = ps.executeQuery();

    while (rs.next()) {
       
        Badge badge = new Badge();
        badge.setId(rs.getInt("id"));
        badge.setCommantaire(rs.getString("Commantaire"));
        badge.setTypeBadge(TypeBadge.valueOf(rs.getString("typeBadge"))); 
        badge.setDateBadge(rs.getDate("dateBadge").toLocalDate());
        
        
        Restaurant restaurant = new Restaurant();
        restaurant.setIdrestau(rs.getInt("idrestau"));
        restaurant.setNom(rs.getString("nom"));
        // Associez le restaurant à l'avis
        badge.setRestaurant(restaurant);
        
        User user = new User();
        user.setIduser(rs.getInt("iduser"));
        user.setUsername(rs.getString("username"));
        badge.setUser(user);

       
        listeBadge.add(badge);
    }

    return listeBadge;
    
}

   
   public List<String> getTypeBadge() throws SQLException {
    List<String> typeBadge = new ArrayList<>();
    String query = "SELECT typeBadge FROM badge";
    try (PreparedStatement preparedStatement = connection.prepareStatement(query);
         ResultSet resultSet = preparedStatement.executeQuery()) {
        while (resultSet.next()) {
            String typeBadgee = resultSet.getString("typeBadge");
            typeBadge.add(typeBadgee);
        }
    }
    return typeBadge;
}
  public Badge obtenirBadgeParIdUser(int userId) throws SQLException {
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    Badge badge = null;

    try {
        String sql = "SELECT b.*, r.nom " +
                     "FROM badge b " +
                     "JOIN restaurant r ON b.idrestau = r.idrestau " +
                     "WHERE b.iduser = ?";
        preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setInt(1, userId);

        resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            badge = new Badge();
            badge.setId(resultSet.getInt("id"));
            badge.setCommantaire(resultSet.getString("commantaire"));
            badge.setDateBadge(resultSet.getDate("dateBadge").toLocalDate());
            badge.setTypeBadge(TypeBadge.valueOf(resultSet.getString("typeBadge")));
            Restaurant restaurant = new Restaurant();
            restaurant.setNom(resultSet.getString("nom"));
            badge.setRestaurant(restaurant);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        throw e;
    }

    return badge;
}
  public Map<TypeBadge, Integer> calculerNombreBadgesParType() throws SQLException {
        Map<TypeBadge, Integer> badgeCounts = new HashMap<>();

        String query = "SELECT typeBadge, COUNT(*) as count FROM badge GROUP BY typeBadge";

        try (Connection connection = Datasource.getInstance().getCnx();
             PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                TypeBadge typeBadge = TypeBadge.valueOf(resultSet.getString("typeBadge"));
                int count = resultSet.getInt("count");
                badgeCounts.put(typeBadge, count);
            }
        }

        return badgeCounts;
    }

  
  public boolean badgeExistePourRestaurant(TypeBadge typeBadge, int idRestaurant) throws SQLException {
    String req = "SELECT id FROM badge WHERE typeBadge = ? AND idrestau = ?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setString(1, typeBadge.toString());
    ps.setInt(2, idRestaurant);
    ResultSet rs = ps.executeQuery();
    return rs.next();
}

    public Map<TypeBadge, Integer> countBadgesByType() throws SQLException {
    String query = "SELECT typeBadge, COUNT(*) as count FROM badge GROUP BY typeBadge";
    
    try (PreparedStatement statement = connection.prepareStatement(query);
         ResultSet resultSet = statement.executeQuery()) {
        Map<TypeBadge, Integer> badgeCounts = new HashMap<>();
        
        while (resultSet.next()) {
            TypeBadge badgeType = TypeBadge.valueOf(resultSet.getString("typeBadge"));
            int count = resultSet.getInt("count");
            badgeCounts.put(badgeType, count);
        }
        
        return badgeCounts;
    }
}

}